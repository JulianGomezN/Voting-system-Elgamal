"""
Script to initialize the PostgreSQL database with secure environment variables
"""

import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
import sys
import os

# Cargar variables de entorno
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    print("‚ö†Ô∏è python-dotenv no est√° disponible")

# Configuraci√≥n para usar exclusivamente la conexi√≥n remota a Postgres (Supabase)
DB_CONNECTION_STRING = os.environ.get('DATABASE_URL')

# Estas variables ya no se usar√°n, pero se mantienen para compatibilidad con c√≥digo existente
DB_HOST = None
DB_PORT = None
DB_USER = None
DB_PASSWORD = None
DB_NAME = "postgres"  # Nombre de la base de datos en Supabase

def validate_environment():
    """Validar que todas las variables de entorno necesarias est√©n configuradas"""
    # Verificar si tenemos la cadena de conexi√≥n para Supabase
    if DB_CONNECTION_STRING:
        print("‚úÖ Cadena de conexi√≥n para Supabase detectada")
        # Mostramos los primeros caracteres para verificar sin exponer credenciales
        masked_connection = DB_CONNECTION_STRING[:20] + "..." if len(DB_CONNECTION_STRING) > 20 else "..."
        print(f"   - Conexi√≥n: {masked_connection}")
        return True
    else:
        print("‚ùå Error: DATABASE_URL no est√° configurada en el archivo .env")
        print("üí° Agrega la l√≠nea: DATABASE_URL=postgresql://usuario:contrase√±a@host:puerto/basededatos")
        return False

def test_postgresql_connection():
    """Verificar si PostgreSQL est√° disponible usando variables de entorno"""
    print(f"string de conexi√≥n: {DB_CONNECTION_STRING if DB_CONNECTION_STRING else 'No disponible'}")
    try:
        if DB_CONNECTION_STRING:
            # Usar la cadena de conexi√≥n completa (como la de Supabase)
            print("‚ÑπÔ∏è  Usando cadena de conexi√≥n completa")
            conn = psycopg2.connect(DB_CONNECTION_STRING)
            print("‚úÖ Conexi√≥n a PostgreSQL (mediante URL) exitosa")
        else:
            # Usar par√°metros individuales
            print("‚ÑπÔ∏è  Usando conexi√≥n tradicional con par√°metros individuales")
            conn = psycopg2.connect(
                host=DB_HOST,
                port=DB_PORT,
                user=DB_USER,
                password=DB_PASSWORD
            )
            print("‚úÖ Conexi√≥n a PostgreSQL exitosa")
        
        conn.close()
        return True
    except Exception as e:
        print(f"‚ùå PostgreSQL no est√° disponible: {e}")
        print("\nüí° Verifica que:")
        if DB_CONNECTION_STRING:
            print("   - La URL de conexi√≥n (DATABASE_URL) sea correcta")
            print("   - La base de datos remota est√© disponible")
        else:
            print("   - PostgreSQL est√© instalado y ejecut√°ndose")
            print("   - Las credenciales en .env sean correctas")
            print("   - El puerto est√© disponible")
        return False

def create_database_if_not_exists():
    """Crear la base de datos si no existe usando variables de entorno"""
    try:
        # Conectar a PostgreSQL (base de datos por defecto)
        if DB_CONNECTION_STRING:
            # En caso de usar Supabase u otro servicio gestionado, generalmente
            # no es necesario crear la base de datos ya que viene pre-configurada
            print("‚ÑπÔ∏è  Usando base de datos gestionada mediante URL de conexi√≥n")
            # La base de datos ya deber√≠a existir en el servicio gestionado
            return True
            
        # Conexi√≥n tradicional para entornos locales
        conn = psycopg2.connect(
            host=DB_HOST,
            port=DB_PORT,
            user=DB_USER,
            password=DB_PASSWORD
        )
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = conn.cursor()
        
        # Verificar si la base de datos existe
        cursor.execute("SELECT 1 FROM pg_catalog.pg_database WHERE datname = %s", (DB_NAME,))
        exists = cursor.fetchone()
        
        if not exists:
            # Crear la base de datos
            cursor.execute(f'CREATE DATABASE "{DB_NAME}"')
            print(f"‚úÖ Base de datos '{DB_NAME}' creada exitosamente")
        else:
            print(f"‚ÑπÔ∏è  La base de datos '{DB_NAME}' ya existe")
        
        cursor.close()
        conn.close()
        return True
        
    except psycopg2.Error as e:
        print(f"‚ùå Error al crear la base de datos '{DB_NAME}': {e}")
        return False

def init_app_tables():
    """Inicializar las tablas de la aplicaci√≥n"""
    try:
        # Importar la aplicaci√≥n despu√©s de crear las bases de datos
        from app import app, db
        
        # Mostrar la configuraci√≥n de la base de datos
        print(f"üîç URI de la base de datos: {app.config['SQLALCHEMY_DATABASE_URI'][:20]}...")
        print(f"üîç Modo de Flask: {app.config['ENV']}")
        
        with app.app_context():
            print("üîÑ Inicializando tablas de la aplicaci√≥n...")
            # Verificar conexi√≥n
            with db.engine.connect() as conn:
                conn.execute(db.text('SELECT 1'))
            print("‚úÖ Conexi√≥n Flask-SQLAlchemy establecida")
            
            # Crear todas las tablas
            db.create_all()
            print("‚úÖ Tablas de la aplicaci√≥n creadas exitosamente")
            
            # Verificar que las tablas se crearon
            from sqlalchemy import inspect
            inspector = inspect(db.engine)
            tables = inspector.get_table_names()
            if tables:
                print(f"üìã Tablas creadas: {', '.join(tables)}")
            else:
                print("‚ö†Ô∏è No se detectaron tablas creadas")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Error al crear las tablas: {e}")
        
        # Informaci√≥n adicional de depuraci√≥n
        try:
            from app import app
            print(f"üîç Modo de Flask: {app.config.get('ENV', 'No configurado')}")
            print(f"ÔøΩ URI de la base de datos: {app.config.get('SQLALCHEMY_DATABASE_URI', 'No configurada')[:20]}...")
            print(f"üîç Variable de entorno DATABASE_URL: {os.environ.get('DATABASE_URL', 'No configurada')[:20]}...")
        except Exception as debug_error:
            print(f"üîç Error al obtener informaci√≥n de depuraci√≥n: {debug_error}")
            
        print("ÔøΩüí° Verifica que:")
        print("   - La base de datos est√© creada")
        print("   - Las credenciales sean correctas")
        print("   - La conexi√≥n a Supabase est√© activa")
        return False

def main():
    print("üöÄ Inicializando base de datos PostgreSQL con configuraci√≥n segura...")
    print("=" * 65)
    
    # Paso 1: Validar variables de entorno
    print("\nüîê Paso 1: Validando configuraci√≥n de seguridad...")
    if not validate_environment():
        sys.exit(1)
    
    # Paso 2: Verificar PostgreSQL
    print("\nüì¶ Paso 2: Verificando conexi√≥n a PostgreSQL...")
    if not test_postgresql_connection():
        print("\n‚ùå No se puede conectar a PostgreSQL en Supabase.")
        print("\nüîß Pasos para solucionar:")
        print("   1. Verifica que la cadena de conexi√≥n en DATABASE_URL sea correcta")
        print("   2. Aseg√∫rate de que la base de datos en Supabase est√© activa")
        print("   3. Comprueba que la IP desde donde te conectas est√© permitida")
        print("   4. Ejecuta este script nuevamente")
        sys.exit(1)
    
    # Paso 3: Crear base de datos
    print(f"\nüì¶ Paso 3: Verificando base de datos '{DB_NAME}'...")
    if not create_database_if_not_exists():
        print("‚ùå No se pudo configurar la base de datos.")
        sys.exit(1)
    
    # Paso 4: Verificar dependencias Python
    print("\nüì¶ Paso 4: Verificando dependencias de Python...")
    try:
        import flask_sqlalchemy
        import psycopg2
        print("‚úÖ Dependencias de Python verificadas")
    except ImportError as e:
        print(f"‚ùå Dependencias faltantes: {e}")
        print("üí° Ejecuta: pip install -r requirements.txt")
        sys.exit(1)
    
    # Paso 5: Crear tablas de la aplicaci√≥n
    print("\nüì¶ Paso 5: Creando tablas de la aplicaci√≥n...")
    if not init_app_tables():
        print("‚ùå No se pudieron crear las tablas.")
        sys.exit(1)
    
    print("\n" + "=" * 65)
    print("üéâ ¬°Configuraci√≥n completada exitosamente!")
    print("\nüìù Pr√≥ximos pasos:")
    print("   1. Ejecuta la aplicaci√≥n: python app.py")
    print("   2. Ve a http://localhost:5000")
    print("   3. Crea un usuario administrador en: /admin/create_admin")
    print(f"\nüîß Informaci√≥n de conexi√≥n:")
    print("   - Usando base de datos remota en Supabase")
    print("   - Conexi√≥n mediante URL segura")
    print("\nüìä Para administrar la base de datos:")
    print("   - Accede al panel de control de Supabase")
    print("   - Ve a la secci√≥n 'Database' o 'SQL Editor'")
    print("   - Utiliza las herramientas de Supabase para gestionar tablas y datos")

if __name__ == "__main__":
    main()
